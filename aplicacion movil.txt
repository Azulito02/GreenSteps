1. Configuración del Proyecto con Expo y Firebase
Crea un proyecto Expo:

bash
Copiar código
npx create-expo-app my-environment-app
cd my-environment-app
npx expo install firebase
Instala dependencias adicionales:

bash
Copiar código
expo install expo-image-picker expo-location
Configura Firebase:

Crea un proyecto en Firebase y habilita Firestore, Authentication, y Storage.
Crea un archivo firebase.js para la configuración de Firebase:
javascript
Copiar código
import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { getStorage } from "firebase/storage";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
  apiKey: "your-api-key",
  authDomain: "your-auth-domain",
  projectId: "your-project-id",
  storageBucket: "your-storage-bucket",
  messagingSenderId: "your-messaging-sender-id",
  appId: "your-app-id"
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const storage = getStorage(app);
const auth = getAuth(app);

export { db, storage, auth };
2. Subir Fotos y Videos con Expo ImagePicker
Implementa la funcionalidad para seleccionar imágenes o videos y subirlos a Firebase Storage:
javascript
Copiar código
import * as ImagePicker from 'expo-image-picker';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { storage } from './firebase'; // Tu archivo de configuración Firebase

const pickImage = async () => {
  let result = await ImagePicker.launchImageLibraryAsync({
    mediaTypes: ImagePicker.MediaTypeOptions.All,
    allowsEditing: true,
    aspect: [4, 3],
    quality: 1,
  });

  if (!result.canceled) {
    const fileRef = ref(storage, `images/${new Date().toISOString()}-${result.uri.split('/').pop()}`);
    const response = await fetch(result.uri);
    const blob = await response.blob();
    await uploadBytes(fileRef, blob);
    const url = await getDownloadURL(fileRef);
    console.log('File uploaded and available at', url);
  }
};
3. Subir Ubicación del Usuario con Expo Location
Pide permisos para acceder a la ubicación y súbela a Firestore:
javascript
Copiar código
import * as Location from 'expo-location';
import { collection, addDoc } from 'firebase/firestore';
import { db } from './firebase';

const getLocation = async () => {
  let { status } = await Location.requestForegroundPermissionsAsync();
  if (status !== 'granted') {
    console.log('Permission to access location was denied');
    return;
  }

  let location = await Location.getCurrentPositionAsync({});
  console.log(location);

  await addDoc(collection(db, 'reports'), {
    location: {
      latitude: location.coords.latitude,
      longitude: location.coords.longitude,
    },
    timestamp: new Date(),
  });
};
4. Formulario para Descripción del Incidente
Puedes usar componentes de React Native como TextInput para permitir al usuario escribir la descripción del incidente:

javascript
Copiar código
import React, { useState } from 'react';
import { TextInput, Button } from 'react-native';
import { addDoc, collection } from 'firebase/firestore';
import { db } from './firebase';

const ReportForm = () => {
  const [description, setDescription] = useState('');

  const handleSubmit = async () => {
    await addDoc(collection(db, 'reports'), {
      description: description,
      timestamp: new Date(),
    });
    setDescription('');
  };

  return (
    <>
      <TextInput
        placeholder="Describe el incidente"
        value={description}
        onChangeText={setDescription}
        multiline
        style={{ height: 100, borderColor: 'gray', borderWidth: 1, margin: 10 }}
      />
      <Button title="Enviar Reporte" onPress={handleSubmit} />
    </>
  );
};
5. Integración del Mapa (opcional)
Puedes integrar un mapa interactivo usando react-native-maps para mostrar las ubicaciones de los incidentes reportados:

bash
Copiar código
expo install react-native-maps
6. Subir todo a Firebase
En cada reporte, puedes combinar todos los datos como la imagen, el video, la ubicación y la descripción para que se suban juntos a Firestore.