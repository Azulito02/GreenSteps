¡Claro! Vamos a empezar con el diseño del frontend básico de la aplicación para el monitoreo y reporte ciudadano. Empezaremos con la estructura y los componentes principales: carga de imágenes/videos, formulario de descripción, y un botón para obtener la ubicación del usuario.

1. Estructura Inicial del Proyecto
Primero, asegúrate de que tu proyecto esté listo. Ejecuta estos comandos si aún no lo has hecho:

bash
Copiar código
npx create-expo-app environment-monitoring
cd environment-monitoring
npx expo install expo-image-picker expo-location
2. Configuración de App.js
Ahora, vamos a diseñar el frontend en el archivo principal App.js:

javascript
Copiar código
import React, { useState } from 'react';
import { StyleSheet, Text, View, Button, Image, TextInput, ScrollView } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import * as Location from 'expo-location';

export default function App() {
  const [image, setImage] = useState(null);
  const [description, setDescription] = useState('');
  const [location, setLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);

  // Función para elegir una imagen o video
  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  // Función para obtener la ubicación del usuario
  const getLocation = async () => {
    let { status } = await Location.requestForegroundPermissionsAsync();
    if (status !== 'granted') {
      setErrorMsg('Permission to access location was denied');
      return;
    }

    let currentLocation = await Location.getCurrentPositionAsync({});
    setLocation({
      latitude: currentLocation.coords.latitude,
      longitude: currentLocation.coords.longitude,
    });
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>Monitoreo Ciudadano Ambiental</Text>

      {/* Selector de imagen/video */}
      <Button title="Seleccionar Imagen/Video" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}

      {/* Formulario para la descripción */}
      <TextInput
        style={styles.input}
        multiline
        placeholder="Describe el incidente"
        value={description}
        onChangeText={setDescription}
      />

      {/* Botón para obtener la ubicación */}
      <Button title="Obtener Ubicación" onPress={getLocation} />
      {location && (
        <Text style={styles.locationText}>
          Ubicación: {location.latitude}, {location.longitude}
        </Text>
      )}

      {/* Muestra de errores */}
      {errorMsg && <Text style={styles.errorText}>{errorMsg}</Text>}

      {/* Botón para enviar el reporte */}
      <Button title="Enviar Reporte" onPress={() => alert('Reporte enviado')} />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    justifyContent: 'center',
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginVertical: 20,
  },
  image: {
    width: 200,
    height: 200,
    resizeMode: 'contain',
    marginVertical: 10,
    alignSelf: 'center',
  },
  input: {
    height: 100,
    borderColor: 'gray',
    borderWidth: 1,
    padding: 10,
    marginVertical: 10,
    textAlignVertical: 'top',
  },
  locationText: {
    textAlign: 'center',
    marginVertical: 10,
  },
  errorText: {
    color: 'red',
    textAlign: 'center',
    marginVertical: 10,
  },
});
3. Explicación del Código
Selector de Imagen/Video: Se usa ImagePicker.launchImageLibraryAsync para seleccionar fotos o videos del dispositivo. La imagen seleccionada se muestra en pantalla.

Formulario de Descripción: El componente TextInput permite al usuario escribir una descripción del incidente.

Obtener Ubicación: Se usa Location.getCurrentPositionAsync para obtener las coordenadas del usuario.

Enviar Reporte: Por el momento, el botón de enviar solo muestra una alerta, pero puedes conectarlo con Firebase más adelante para subir los datos.

4. Estilos
El archivo incluye estilos básicos usando StyleSheet para una interfaz limpia y fácil de navegar.

5. Próximos Pasos
Implementar Firebase para subir las imágenes, la descripción y la ubicación.
Mejorar el diseño visual o añadir mapas si es necesario.

¡Vamos a continuar con los siguientes pasos para integrar Firebase y subir los reportes! Primero configuraremos Firebase, luego añadiremos las funciones para subir las imágenes, la descripción y la ubicación a Firebase Firestore y Storage.

6. Configuración de Firebase
Si aún no has configurado Firebase, sigue estos pasos:

Crea un proyecto en Firebase y habilita Firestore y Firebase Storage.

Instala Firebase en tu proyecto:

bash
Copiar código
npx expo install firebase
Configura Firebase en tu proyecto:

Crea un archivo firebase.js en el directorio raíz del proyecto y añade tu configuración de Firebase. Esto debería contener las credenciales de tu proyecto Firebase:

javascript
Copiar código
import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';
import { getStorage } from 'firebase/storage';
import { getAuth } from 'firebase/auth';

const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID",
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const storage = getStorage(app);
const auth = getAuth(app);

export { db, storage, auth };
Asegúrate de reemplazar los valores de firebaseConfig con los de tu propio proyecto Firebase.

7. Subir Reportes a Firebase
Ahora que tenemos Firebase configurado, vamos a modificar el código para que las imágenes, la ubicación y la descripción se suban a Firebase Firestore y Storage cuando el usuario envíe un reporte.

Actualiza App.js con la funcionalidad de subir los reportes a Firebase:

javascript
Copiar código
import React, { useState } from 'react';
import { StyleSheet, Text, View, Button, Image, TextInput, ScrollView } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import * as Location from 'expo-location';
import { collection, addDoc } from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { db, storage } from './firebase'; // Archivo de configuración Firebase

export default function App() {
  const [image, setImage] = useState(null);
  const [description, setDescription] = useState('');
  const [location, setLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);
  const [uploading, setUploading] = useState(false);

  // Función para elegir una imagen o video
  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.All,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  // Función para obtener la ubicación del usuario
  const getLocation = async () => {
    let { status } = await Location.requestForegroundPermissionsAsync();
    if (status !== 'granted') {
      setErrorMsg('Permission to access location was denied');
      return;
    }

    let currentLocation = await Location.getCurrentPositionAsync({});
    setLocation({
      latitude: currentLocation.coords.latitude,
      longitude: currentLocation.coords.longitude,
    });
  };

  // Función para subir la imagen a Firebase Storage
  const uploadImage = async (uri) => {
    const blob = await fetch(uri).then((res) => res.blob());
    const fileRef = ref(storage, `images/${new Date().toISOString()}-${uri.split('/').pop()}`);
    await uploadBytes(fileRef, blob);
    return await getDownloadURL(fileRef);
  };

  // Función para enviar el reporte
  const submitReport = async () => {
    if (!image || !description || !location) {
      alert('Por favor, completa todos los campos');
      return;
    }

    setUploading(true);

    try {
      // Subir imagen a Firebase Storage
      const imageUrl = await uploadImage(image);

      // Guardar el reporte en Firestore
      await addDoc(collection(db, 'reports'), {
        imageUrl,
        description,
        location,
        timestamp: new Date(),
      });

      alert('Reporte enviado con éxito');
    } catch (error) {
      console.error("Error al enviar el reporte: ", error);
      alert('Hubo un error al enviar el reporte');
    } finally {
      setUploading(false);
    }
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>Monitoreo Ciudadano Ambiental</Text>

      {/* Selector de imagen/video */}
      <Button title="Seleccionar Imagen/Video" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}

      {/* Formulario para la descripción */}
      <TextInput
        style={styles.input}
        multiline
        placeholder="Describe el incidente"
        value={description}
        onChangeText={setDescription}
      />

      {/* Botón para obtener la ubicación */}
      <Button title="Obtener Ubicación" onPress={getLocation} />
      {location && (
        <Text style={styles.locationText}>
          Ubicación: {location.latitude}, {location.longitude}
        </Text>
      )}

      {/* Muestra de errores */}
      {errorMsg && <Text style={styles.errorText}>{errorMsg}</Text>}

      {/* Botón para enviar el reporte */}
      <Button title={uploading ? "Enviando..." : "Enviar Reporte"} onPress={submitReport} disabled={uploading} />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    justifyContent: 'center',
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginVertical: 20,
  },
  image: {
    width: 200,
    height: 200,
    resizeMode: 'contain',
    marginVertical: 10,
    alignSelf: 'center',
  },
  input: {
    height: 100,
    borderColor: 'gray',
    borderWidth: 1,
    padding: 10,
    marginVertical: 10,
    textAlignVertical: 'top',
  },
  locationText: {
    textAlign: 'center',
    marginVertical: 10,
  },
  errorText: {
    color: 'red',
    textAlign: 'center',
    marginVertical: 10,
  },
});
8. Explicación de la Funcionalidad
Subir Imagen a Firebase: Se utiliza uploadBytes y getDownloadURL para subir la imagen a Firebase Storage y obtener su URL pública.

Subir Reporte a Firestore: Se guarda el reporte completo (con imagen, descripción, ubicación y fecha) en Firestore usando addDoc.

Botón de Enviar Reporte: Al presionar el botón, se verifican los datos y se procede a subir la imagen y a guardar el reporte. Si falta algún dato, se muestra una alerta.

9. Pruebas y Mejoras
Probar la app en un dispositivo físico, ya que Expo en simuladores no siempre maneja bien la cámara ni la ubicación.
Mejorar la UX añadiendo loaders, validaciones adicionales y quizás un mapa interactivo para seleccionar la ubicación.
Este código debería cubrir lo esencial de tu app. ¿Te gustaría que añada algo más o continúo con alguna funcionalidad extra?